"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8664],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),p=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,k=c["".concat(m,".").concat(d)]||c[d]||s[d]||i;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6012:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},m="Matrix",p={unversionedId:"Matrix and Tensor/Matrix",id:"Matrix and Tensor/Matrix",title:"Matrix",description:"As a scientific programming language, all the usual matrix operations are supported by Hedgehog Script. The matrix is a two-dimensional array of numbers. The matrix is created by the mat() function or Mat() class constructor.",source:"@site/Hedgehog-Script/5. Matrix and Tensor/Matrix.mdx",sourceDirName:"5. Matrix and Tensor",slug:"/Matrix and Tensor/Matrix",permalink:"/Hedgehog-Script/Matrix and Tensor/Matrix",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Mat",permalink:"/Hedgehog-Script/Built-In Objects/Mat"},next:{title:"Tensor",permalink:"/Hedgehog-Script/Matrix and Tensor/Tensor"}},u={},s=[{value:"Create a matrix",id:"create-a-matrix",level:3},{value:"Create certain types of matrix with built-in functions",id:"create-certain-types-of-matrix-with-built-in-functions",level:3},{value:"Matrix operations",id:"matrix-operations",level:3},{value:"Reference of <code>Mat()</code> class",id:"reference-of-mat-class",level:3},{value:"Member variables",id:"member-variables",level:4},{value:"Member functions",id:"member-functions",level:4}],c={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"matrix"},"Matrix"),(0,i.kt)("p",null,"As a scientific programming language, all the usual matrix operations are supported by Hedgehog Script. The matrix is a two-dimensional array of numbers. The matrix is created by the ",(0,i.kt)("inlineCode",{parentName:"p"},"mat()")," function or ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class constructor. "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"create-a-matrix"},"Create a matrix"),(0,i.kt)("p",null,"You can create a matrix by the ",(0,i.kt)("inlineCode",{parentName:"p"},"mat()")," function or ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class constructor. The ",(0,i.kt)("inlineCode",{parentName:"p"},"mat()")," function is a shortcut (or a wrapper function) for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class constructor. "),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class constructor accept the following arguments: "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mat(input: number[][] | number[] | number)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"param")," ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," - the input data for the matrix, which means you can create a matrix by passing a two-dimensional array of numbers(as an M-by-N matrix), a one-dimensional array of numbers(as a 1-by-N matrix), or a single number(as a 1-by-1 matrix)."),(0,i.kt)("p",null,"the ",(0,i.kt)("inlineCode",{parentName:"p"},"mat()")," function and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class constructor have the same parameters, but the ",(0,i.kt)("inlineCode",{parentName:"p"},"mat()")," function is more convenient to use. "),(0,i.kt)("p",null,"Here is an example of creating a matrix by the ",(0,i.kt)("inlineCode",{parentName:"p"},"mat()")," function and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class constructor: "),(0,i.kt)("iframe",{src:"https://hlab.app/s/docs/matrix_demo_1",width:"100%",height:"400px"}),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"create-certain-types-of-matrix-with-built-in-functions"},"Create certain types of matrix with built-in functions"),(0,i.kt)("p",null,"Also here are a list of built-in functions for creating certain types of matrix:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"csv2mat(csv: string): Mat")," - create a matrix from a CSV string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mat2csv(mat: Mat): string")," - create a CSV string from a matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"json2mat(json: string): Mat")," - create a matrix from a JSON string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mat2json(mat: Mat): string")," - create a JSON string from a matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"zeros(m: number, n?: number): Mat")," - create an m-by-m or m-by-n matrix of zeros"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ones(m: number, n?: number): Mat")," - create an m-by-m or m-by-n matrix of ones"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Ns(m: number, n?: number, N:number): Mat")," - create an m-by-m or m-by-n matrix of given number ",(0,i.kt)("inlineCode",{parentName:"p"},"N")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"diag(v: number[]): Mat")," - create a diagonal matrix from a vector"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"eye(m: number, n?: number): Mat")," - create an m-by-m or m-by-n identity matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"random(m: number, n?: number): Mat")," - create an m-by-m or m-by-n matrix of random numbers"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"range(start: number, end = null, step?: number): Mat")," - create a 1-by-N matrix of numbers from start to end with a step. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"range(x)")," - create a 1-by-x matrix of numbers from 0 to x-1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"range(x, y)")," - create a 1-by-(y-x) matrix of numbers from x to y-1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"range(x, y, z)")," - create a 1-by-ceil((y-x)/z) matrix of numbers from x to y-1 with a step of z")),(0,i.kt)("iframe",{src:"https://hlab.app/s/docs/matrix_demo_2",width:"100%",height:"600px"}),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"matrix-operations"},"Matrix operations"),(0,i.kt)("p",null,"Most of the matrix operations are supported and overloaded by Hedgehog Script, like the ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"**")," operators -- which means you can use the Matlab-flavored operators to do matrix operations and expressions."),(0,i.kt)("iframe",{src:"https://hlab.app/s/docs/matrix_demo_operators",width:"100%",height:"600px"}),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"reference-of-mat-class"},"Reference of ",(0,i.kt)("inlineCode",{parentName:"h3"},"Mat()")," class"),(0,i.kt)("p",null,"Here are the reference of ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat()")," class:"),(0,i.kt)("h4",{id:"member-variables"},"Member variables"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"val: number[][]")," - the value (2D array of number) of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rows: number")," - the number of rows of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cols: number")," - the number of columns of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mode: string")," - the mode of the matrix, which can be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'gpu'")," (GPU acceleration)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'cpu'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," (CPU mode) "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'wasm'")," (wasm mode)")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"digits")," - the number of digits to display when printing the matrix"),(0,i.kt)("h4",{id:"member-functions"},"Member functions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"clear()")," - clear the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"clone() : Mat")," - clone the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"copy(mat: Mat)")," - copy the value of another matrix to the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"equals(mat: Mat): boolean")," - check if the current matrix is equal to another matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"init(input: number[][]): Mat")," - initialize the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"min(): number")," - get the minimum value of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"max(): number")," - get the maximum value of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"range(arg1: number, arg2: number|null, step = 1): Mat")," - create a 1-by-N matrix of numbers from arg1 to arg2 with a step."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Ns(row: number, col: number, N: number): Mat")," - set the value of the matrix to a given number ",(0,i.kt)("inlineCode",{parentName:"p"},"N")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"zeros(row: number, col: number): Mat")," - set the value of the matrix to zeros"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ones(row: number, col: number): Mat")," - set the value of the matrix to ones"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"diag(v: number[]): Mat")," - set the value of the matrix to a diagonal matrix from a vector"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"eye(row: number, col: number): Mat")," - set the value of the matrix to an identity matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"random(row: number, col: number): Mat")," - set the value of the matrix to a matrix of random numbers"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"T(): Mat")," - transpose the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"transpose(): Mat")," - transpose the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"each(functor: (element:number) => number): Mat")," - apply a functor to each element of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"add(mat: Mat): Mat")," - add another matrix to the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"addScalar(scalar: number): Mat")," - add a scalar to the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"minus(mat: Mat): Mat")," - subtract another matrix from the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"multiply(mat: Mat): Mat")," - multiply another matrix to the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"multiplyScalar(scalar: number): Mat")," - multiply a scalar to the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"minusScalar(scalar: number): Mat")," - subtract a scalar from the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dotMultiply(mat: Mat): Mat")," - dot multiply another matrix to the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"divide(mat: Mat): Mat")," - divide the current matrix by another matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"set(row: number, col: number, value: number): Mat")," - set the value of a given element of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"get(row: number, col: number): number")," - get the value of a given element of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"at(row: number, col: number): number")," - get the value of a given element of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"to2DArray(): number[][]")," - convert the matrix to a 2D array of number"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"row(row: number): Mat")," - get a row of the matrix as an N-by-1 matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"col(col: number): Mat")," - get a column of the matrix as an 1-by-N matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"reshape(row: number, col: number): Mat")," - reshape the matrix to a given size"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"subMatrix(rowStart: number, rowEnd: number, colStart: number, colEnd: number): Mat")," - get a sub-matrix of the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"resize(row: number, col: number, defaultFillingValue = 0): Mat")," - resize the matrix to a given size"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Rows(rowStart: number, rowEnd: number): Mat")," - get a sub-matrix of the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Cols(colStart: number, colEnd: number): Mat")," - get a sub-matrix of the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ColVector(col: number): Mat")," - get a column of the matrix as an 1-by-N matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Row(row: number): Mat")," - get a row of the matrix as an N-by-1 matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Col(col: number): Mat")," - get a column of the matrix as an 1-by-N matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"squareSum(): number")," - get the square sum of the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"setDigits(digits: number): Mat")," - set the number of digits to display when printing the matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toString(): string")," - convert the matrix to a string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toStirngWithTab(): string")," - convert the matrix to a string with tab"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toCsv(): string")," - convert the matrix to a csv string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toJson(): string")," - convert the matrix to a json string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toTex(): string")," - convert the matrix to a tex string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"log(): Mat")," - print the object in the console terminal (for debugging)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"appendInRow(mat: Mat): Mat")," - append another matrix in the row of the current matrix"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"appendInColumn(mat: Mat): Mat")," - append another matrix in the column of the current matrix"))}d.isMDXComponent=!0}}]);