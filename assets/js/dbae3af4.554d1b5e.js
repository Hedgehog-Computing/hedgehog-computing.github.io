"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8891],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=i,b=m["".concat(u,".").concat(f)]||m[f]||l[f]||o;return n?r.createElement(b,a(a({ref:t},c),{},{components:n})):r.createElement(b,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1703:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return l}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],p={},u=void 0,s={unversionedId:"Properties/is_number",id:"Properties/is_number",title:"is_number",description:"is_number(input boolean",source:"@site/math/Properties/is_number.mdx",sourceDirName:"Properties",slug:"/Properties/is_number",permalink:"/math/Properties/is_number",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"is_diag",permalink:"/math/Properties/is_diag"},next:{title:"is_symmetric",permalink:"/math/Properties/is_symmetric"}},c={},l=[{value:"<code>is_number(input: any): boolean</code>",id:"is_numberinput-any-boolean",level:4}],m={toc:l};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"is_numberinput-any-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"is_number(input: any): boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"param")," ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," - Anything to test if it is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," or not"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"returns:")," - ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," - ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if it is a ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," otherwise. ",(0,o.kt)("inlineCode",{parentName:"p"},"Infinity")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"NaN")," are defined to ",(0,o.kt)("strong",{parentName:"p"},"not")," be numbers in Hedgehog Lab. You can use hex and binary inputs as numbers - 0xff10 etc. "),(0,o.kt)("p",null,"This function tests if the input is a number or not. It does not allow strings, infinity, NaN. It also checks type. "),(0,o.kt)("iframe",{src:"https://hlab.app/s/docs/isNumber_hbook",width:"100%",height:"500px"}))}f.isMDXComponent=!0}}]);