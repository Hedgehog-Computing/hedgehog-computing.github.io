"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6940],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},276:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={},l=void 0,c={unversionedId:"Properties/is_diag",id:"Properties/is_diag",title:"is_diag",description:"is_diag(matrix boolean",source:"@site/math/Properties/is_diag.mdx",sourceDirName:"Properties",slug:"/Properties/is_diag",permalink:"/math/Properties/is_diag",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"det",permalink:"/math/Properties/det"},next:{title:"is_number",permalink:"/math/Properties/is_number"}},s={},u=[{value:"<code>is_diag(matrix: any[] | Mat) : boolean</code>",id:"is_diagmatrix-any--mat--boolean",level:4}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"is_diagmatrix-any--mat--boolean"},(0,i.kt)("inlineCode",{parentName:"h4"},"is_diag(matrix: any[] | Mat) : boolean")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"param")," ",(0,i.kt)("inlineCode",{parentName:"p"},"matrix")," - an ",(0,i.kt)("inlineCode",{parentName:"p"},"Array")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat")," to check if it's diagonal or not. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"returns:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if diagonal, ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise"),(0,i.kt)("p",null,"A diagonal matrix is similar to the identity matrix but the diagonal entries are free to have any number in them (unlike identity which has all 1's on the diagonal) and 0's elsewhere. Connected concepts are the upper triangular and lower triangular matrices which are also within this book. This function specifically takes in any 2-D ",(0,i.kt)("inlineCode",{parentName:"p"},"Array")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Mat")," object as an input and determines whether it's diagonal or not."),(0,i.kt)("iframe",{src:"https://hlab.app/s/docs/hbook_is_diag",width:"100%",height:"500px"}))}d.isMDXComponent=!0}}]);